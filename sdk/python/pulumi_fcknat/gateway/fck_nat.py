# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['FckNatArgs', 'FckNat']

@pulumi.input_type
class FckNatArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 additional_security_group_ids: Optional[pulumi.Input[Sequence[str]]] = None,
                 ami_id: Optional[pulumi.Input[str]] = None,
                 attach_ssm_policy: Optional[pulumi.Input[bool]] = None,
                 cloudwatch_agent_configuration_arn_param: Optional[pulumi.Input[str]] = None,
                 cloudwatch_agent_configuration_collection_interval: Optional[pulumi.Input[int]] = None,
                 cloudwatch_agent_configuration_endpoint_override: Optional[pulumi.Input[str]] = None,
                 cloudwatch_agent_configuration_namespace: Optional[pulumi.Input[str]] = None,
                 ebs_root_volume_size: Optional[pulumi.Input[int]] = None,
                 eip_allocation_ids: Optional[pulumi.Input[Sequence[str]]] = None,
                 encryption: Optional[pulumi.Input[bool]] = None,
                 ha_mode: Optional[pulumi.Input[bool]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 route_table_ids: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 ssh_cidr_blocks_ipv4: Optional[pulumi.Input[Sequence[str]]] = None,
                 ssh_cidr_blocks_ipv6: Optional[pulumi.Input[Sequence[str]]] = None,
                 ssh_key_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 update_route_tables: Optional[pulumi.Input[bool]] = None,
                 use_cloudwatch_agent: Optional[pulumi.Input[bool]] = None,
                 use_default_security_group: Optional[pulumi.Input[bool]] = None,
                 use_spot_instances: Optional[pulumi.Input[bool]] = None,
                 use_ssh: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a FckNat resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if additional_security_group_ids is not None:
            pulumi.set(__self__, "additional_security_group_ids", additional_security_group_ids)
        if ami_id is not None:
            pulumi.set(__self__, "ami_id", ami_id)
        if attach_ssm_policy is not None:
            pulumi.set(__self__, "attach_ssm_policy", attach_ssm_policy)
        if cloudwatch_agent_configuration_arn_param is not None:
            pulumi.set(__self__, "cloudwatch_agent_configuration_arn_param", cloudwatch_agent_configuration_arn_param)
        if cloudwatch_agent_configuration_collection_interval is not None:
            pulumi.set(__self__, "cloudwatch_agent_configuration_collection_interval", cloudwatch_agent_configuration_collection_interval)
        if cloudwatch_agent_configuration_endpoint_override is not None:
            pulumi.set(__self__, "cloudwatch_agent_configuration_endpoint_override", cloudwatch_agent_configuration_endpoint_override)
        if cloudwatch_agent_configuration_namespace is not None:
            pulumi.set(__self__, "cloudwatch_agent_configuration_namespace", cloudwatch_agent_configuration_namespace)
        if ebs_root_volume_size is not None:
            pulumi.set(__self__, "ebs_root_volume_size", ebs_root_volume_size)
        if eip_allocation_ids is not None:
            pulumi.set(__self__, "eip_allocation_ids", eip_allocation_ids)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if ha_mode is not None:
            pulumi.set(__self__, "ha_mode", ha_mode)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if route_table_ids is not None:
            pulumi.set(__self__, "route_table_ids", route_table_ids)
        if ssh_cidr_blocks_ipv4 is not None:
            pulumi.set(__self__, "ssh_cidr_blocks_ipv4", ssh_cidr_blocks_ipv4)
        if ssh_cidr_blocks_ipv6 is not None:
            pulumi.set(__self__, "ssh_cidr_blocks_ipv6", ssh_cidr_blocks_ipv6)
        if ssh_key_name is not None:
            pulumi.set(__self__, "ssh_key_name", ssh_key_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if update_route_tables is not None:
            pulumi.set(__self__, "update_route_tables", update_route_tables)
        if use_cloudwatch_agent is not None:
            pulumi.set(__self__, "use_cloudwatch_agent", use_cloudwatch_agent)
        if use_default_security_group is not None:
            pulumi.set(__self__, "use_default_security_group", use_default_security_group)
        if use_spot_instances is not None:
            pulumi.set(__self__, "use_spot_instances", use_spot_instances)
        if use_ssh is not None:
            pulumi.set(__self__, "use_ssh", use_ssh)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="additionalSecurityGroupIds")
    def additional_security_group_ids(self) -> Optional[pulumi.Input[Sequence[str]]]:
        return pulumi.get(self, "additional_security_group_ids")

    @additional_security_group_ids.setter
    def additional_security_group_ids(self, value: Optional[pulumi.Input[Sequence[str]]]):
        pulumi.set(self, "additional_security_group_ids", value)

    @property
    @pulumi.getter(name="amiId")
    def ami_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ami_id")

    @ami_id.setter
    def ami_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ami_id", value)

    @property
    @pulumi.getter(name="attachSsmPolicy")
    def attach_ssm_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "attach_ssm_policy")

    @attach_ssm_policy.setter
    def attach_ssm_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "attach_ssm_policy", value)

    @property
    @pulumi.getter(name="cloudwatchAgentConfigurationArnParam")
    def cloudwatch_agent_configuration_arn_param(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudwatch_agent_configuration_arn_param")

    @cloudwatch_agent_configuration_arn_param.setter
    def cloudwatch_agent_configuration_arn_param(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudwatch_agent_configuration_arn_param", value)

    @property
    @pulumi.getter(name="cloudwatchAgentConfigurationCollectionInterval")
    def cloudwatch_agent_configuration_collection_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cloudwatch_agent_configuration_collection_interval")

    @cloudwatch_agent_configuration_collection_interval.setter
    def cloudwatch_agent_configuration_collection_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cloudwatch_agent_configuration_collection_interval", value)

    @property
    @pulumi.getter(name="cloudwatchAgentConfigurationEndpointOverride")
    def cloudwatch_agent_configuration_endpoint_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudwatch_agent_configuration_endpoint_override")

    @cloudwatch_agent_configuration_endpoint_override.setter
    def cloudwatch_agent_configuration_endpoint_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudwatch_agent_configuration_endpoint_override", value)

    @property
    @pulumi.getter(name="cloudwatchAgentConfigurationNamespace")
    def cloudwatch_agent_configuration_namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudwatch_agent_configuration_namespace")

    @cloudwatch_agent_configuration_namespace.setter
    def cloudwatch_agent_configuration_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudwatch_agent_configuration_namespace", value)

    @property
    @pulumi.getter(name="ebsRootVolumeSize")
    def ebs_root_volume_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ebs_root_volume_size")

    @ebs_root_volume_size.setter
    def ebs_root_volume_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ebs_root_volume_size", value)

    @property
    @pulumi.getter(name="eipAllocationIds")
    def eip_allocation_ids(self) -> Optional[pulumi.Input[Sequence[str]]]:
        return pulumi.get(self, "eip_allocation_ids")

    @eip_allocation_ids.setter
    def eip_allocation_ids(self, value: Optional[pulumi.Input[Sequence[str]]]):
        pulumi.set(self, "eip_allocation_ids", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter(name="haMode")
    def ha_mode(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ha_mode")

    @ha_mode.setter
    def ha_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ha_mode", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="routeTableIds")
    def route_table_ids(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "route_table_ids")

    @route_table_ids.setter
    def route_table_ids(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "route_table_ids", value)

    @property
    @pulumi.getter(name="sshCidrBlocksIpv4")
    def ssh_cidr_blocks_ipv4(self) -> Optional[pulumi.Input[Sequence[str]]]:
        return pulumi.get(self, "ssh_cidr_blocks_ipv4")

    @ssh_cidr_blocks_ipv4.setter
    def ssh_cidr_blocks_ipv4(self, value: Optional[pulumi.Input[Sequence[str]]]):
        pulumi.set(self, "ssh_cidr_blocks_ipv4", value)

    @property
    @pulumi.getter(name="sshCidrBlocksIpv6")
    def ssh_cidr_blocks_ipv6(self) -> Optional[pulumi.Input[Sequence[str]]]:
        return pulumi.get(self, "ssh_cidr_blocks_ipv6")

    @ssh_cidr_blocks_ipv6.setter
    def ssh_cidr_blocks_ipv6(self, value: Optional[pulumi.Input[Sequence[str]]]):
        pulumi.set(self, "ssh_cidr_blocks_ipv6", value)

    @property
    @pulumi.getter(name="sshKeyName")
    def ssh_key_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_key_name")

    @ssh_key_name.setter
    def ssh_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updateRouteTables")
    def update_route_tables(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "update_route_tables")

    @update_route_tables.setter
    def update_route_tables(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_route_tables", value)

    @property
    @pulumi.getter(name="useCloudwatchAgent")
    def use_cloudwatch_agent(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_cloudwatch_agent")

    @use_cloudwatch_agent.setter
    def use_cloudwatch_agent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_cloudwatch_agent", value)

    @property
    @pulumi.getter(name="useDefaultSecurityGroup")
    def use_default_security_group(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_default_security_group")

    @use_default_security_group.setter
    def use_default_security_group(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_default_security_group", value)

    @property
    @pulumi.getter(name="useSpotInstances")
    def use_spot_instances(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_spot_instances")

    @use_spot_instances.setter
    def use_spot_instances(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_spot_instances", value)

    @property
    @pulumi.getter(name="useSsh")
    def use_ssh(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_ssh")

    @use_ssh.setter
    def use_ssh(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ssh", value)


class FckNat(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_security_group_ids: Optional[pulumi.Input[Sequence[str]]] = None,
                 ami_id: Optional[pulumi.Input[str]] = None,
                 attach_ssm_policy: Optional[pulumi.Input[bool]] = None,
                 cloudwatch_agent_configuration_arn_param: Optional[pulumi.Input[str]] = None,
                 cloudwatch_agent_configuration_collection_interval: Optional[pulumi.Input[int]] = None,
                 cloudwatch_agent_configuration_endpoint_override: Optional[pulumi.Input[str]] = None,
                 cloudwatch_agent_configuration_namespace: Optional[pulumi.Input[str]] = None,
                 ebs_root_volume_size: Optional[pulumi.Input[int]] = None,
                 eip_allocation_ids: Optional[pulumi.Input[Sequence[str]]] = None,
                 encryption: Optional[pulumi.Input[bool]] = None,
                 ha_mode: Optional[pulumi.Input[bool]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 route_table_ids: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 ssh_cidr_blocks_ipv4: Optional[pulumi.Input[Sequence[str]]] = None,
                 ssh_cidr_blocks_ipv6: Optional[pulumi.Input[Sequence[str]]] = None,
                 ssh_key_name: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 update_route_tables: Optional[pulumi.Input[bool]] = None,
                 use_cloudwatch_agent: Optional[pulumi.Input[bool]] = None,
                 use_default_security_group: Optional[pulumi.Input[bool]] = None,
                 use_spot_instances: Optional[pulumi.Input[bool]] = None,
                 use_ssh: Optional[pulumi.Input[bool]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FckNat resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FckNatArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FckNat resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FckNatArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FckNatArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_security_group_ids: Optional[pulumi.Input[Sequence[str]]] = None,
                 ami_id: Optional[pulumi.Input[str]] = None,
                 attach_ssm_policy: Optional[pulumi.Input[bool]] = None,
                 cloudwatch_agent_configuration_arn_param: Optional[pulumi.Input[str]] = None,
                 cloudwatch_agent_configuration_collection_interval: Optional[pulumi.Input[int]] = None,
                 cloudwatch_agent_configuration_endpoint_override: Optional[pulumi.Input[str]] = None,
                 cloudwatch_agent_configuration_namespace: Optional[pulumi.Input[str]] = None,
                 ebs_root_volume_size: Optional[pulumi.Input[int]] = None,
                 eip_allocation_ids: Optional[pulumi.Input[Sequence[str]]] = None,
                 encryption: Optional[pulumi.Input[bool]] = None,
                 ha_mode: Optional[pulumi.Input[bool]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 route_table_ids: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 ssh_cidr_blocks_ipv4: Optional[pulumi.Input[Sequence[str]]] = None,
                 ssh_cidr_blocks_ipv6: Optional[pulumi.Input[Sequence[str]]] = None,
                 ssh_key_name: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 update_route_tables: Optional[pulumi.Input[bool]] = None,
                 use_cloudwatch_agent: Optional[pulumi.Input[bool]] = None,
                 use_default_security_group: Optional[pulumi.Input[bool]] = None,
                 use_spot_instances: Optional[pulumi.Input[bool]] = None,
                 use_ssh: Optional[pulumi.Input[bool]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FckNatArgs.__new__(FckNatArgs)

            __props__.__dict__["additional_security_group_ids"] = additional_security_group_ids
            __props__.__dict__["ami_id"] = ami_id
            __props__.__dict__["attach_ssm_policy"] = attach_ssm_policy
            __props__.__dict__["cloudwatch_agent_configuration_arn_param"] = cloudwatch_agent_configuration_arn_param
            __props__.__dict__["cloudwatch_agent_configuration_collection_interval"] = cloudwatch_agent_configuration_collection_interval
            __props__.__dict__["cloudwatch_agent_configuration_endpoint_override"] = cloudwatch_agent_configuration_endpoint_override
            __props__.__dict__["cloudwatch_agent_configuration_namespace"] = cloudwatch_agent_configuration_namespace
            __props__.__dict__["ebs_root_volume_size"] = ebs_root_volume_size
            __props__.__dict__["eip_allocation_ids"] = eip_allocation_ids
            __props__.__dict__["encryption"] = encryption
            __props__.__dict__["ha_mode"] = ha_mode
            __props__.__dict__["instance_type"] = instance_type
            __props__.__dict__["kms_key_id"] = kms_key_id
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["route_table_ids"] = route_table_ids
            __props__.__dict__["ssh_cidr_blocks_ipv4"] = ssh_cidr_blocks_ipv4
            __props__.__dict__["ssh_cidr_blocks_ipv6"] = ssh_cidr_blocks_ipv6
            __props__.__dict__["ssh_key_name"] = ssh_key_name
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["update_route_tables"] = update_route_tables
            __props__.__dict__["use_cloudwatch_agent"] = use_cloudwatch_agent
            __props__.__dict__["use_default_security_group"] = use_default_security_group
            __props__.__dict__["use_spot_instances"] = use_spot_instances
            __props__.__dict__["use_ssh"] = use_ssh
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["auto_scaling_group_arn"] = None
            __props__.__dict__["iam_instance_profile_arn"] = None
            __props__.__dict__["iam_role_arn"] = None
            __props__.__dict__["instance_id"] = None
            __props__.__dict__["network_interface_id"] = None
            __props__.__dict__["private_ip"] = None
            __props__.__dict__["public_dns"] = None
            __props__.__dict__["public_ip"] = None
            __props__.__dict__["security_group_id"] = None
        super(FckNat, __self__).__init__(
            'fcknat:Gateway:FckNat',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="autoScalingGroupArn")
    def auto_scaling_group_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auto_scaling_group_arn")

    @property
    @pulumi.getter(name="iamInstanceProfileArn")
    def iam_instance_profile_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "iam_instance_profile_arn")

    @property
    @pulumi.getter(name="iamRoleArn")
    def iam_role_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "iam_role_arn")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "network_interface_id")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicDns")
    def public_dns(self) -> pulumi.Output[str]:
        return pulumi.get(self, "public_dns")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "security_group_id")

